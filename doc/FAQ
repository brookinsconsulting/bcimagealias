BC Image Alias extension FAQ

1) Custom image datatypes are supported through the bcimagealias.ini settings block BCImageAliasSettings setting array DataTypeStringList containing an array of dataType string (identifiers)

Example:

[BCImageAliasSettings]
DataTypeStringList[]
DataTypeStringList[]=ezimage
# Uncomment and customize the following line to support custom image datatypes
# DataTypeStringList[]=ezimageextended


2) Disk usage increases after generating image alias variation image files

Disk usage of image alias variations within the eZ Publish var/ezwebin_site/storage/images within the 2011.09 build

The 94 original image alias image variation image files stored within eZ Publish's var/ezwebin_site/storage/images folder of a default installation of the 2011.09 build is about 5 MB.

After generating all possible 1316 image alias variation image files for the default siteaccess the same directory grows to over 18 MB.

That represents a 3.6 times larger amount of disk space consumed by the created image alias variations

Here is a command line command that uses only base system tools to calculate current image alias variation image file disk usage

Command: du -cm var/ezwebin_site/storage/images/|grep total

Output: 5	total


3) Performance

The runtime performance of this extensions provided scripts and workflows depends greatly on the number of image datatypes used, the number of images in content objects, the number of image aliases in settings and the system load of the server during the image alias variation image file generation.

The bcimagealias.php --generate script takes just under 55 seconds (timed) to generate all default image alias variation image files within the eZ Publish var/ezwebin_site/storage/images within the 2011.09 build.

This means the estimated execution time to generate each image alias variation image file in the default installation is 0.041413374 per image alias image variation file.

The bcimagealias.php --remove script takes just under 59.29 seconds (timed) to delete all image alias variation image files within the eZ Publish var/ezwebin_site/storage/images within the 2011.09 build.

This means the estimated execution time to delete each image alias variation image file in the default installation is 0.045053191 per image alias image variation file.


4) Generating and removing image aliases also clears object content cache using eZContentCacheManager::clearContentCacheIfNeeded( $contentObjectID );


5) Kernel Override Requirements

Kernel Class Overrides based on eZ Publish 4.6.x >= 4.6 ( Community Build, 2011.11+ ).

While BCImageAlias by default requires both kernel overrides to provide the features within eZ Publish. 

Though based on your usage (like what version of eZ Publish are you using bcimagealias with?) of the bcimagealias extension (which parts of the extension do you require, which do you not require?) you may be able to avoid using the provided kernel overrides entirely.

If you do not use the 'related-siteaccess' script parameter, workflow event ini setting 'WorkflowEventCurrentSiteAccessAliasImageVariationCreation' set to 'disabled' (default, create override to change), and PHP 'BCImageAlias' class constructor / instance parameter $options['current-siteaccess'] set to false (not default), then you will not require the 'extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php' (modified) kernel class override be installed. The ezimagemanager class was modified to allow loading alias settings from multiple siteaccess ini override files and the default ini file directly to allow eZ Publish to create all the image aliases defined by default (in image.ini) and in several siteaccesses (related siteacesses setting in current siteaccess). Without this you additional functionality you can only generate image aliases defined within the current siteaccess. This may or may not be a concern to others depending on your specific use cases.

Users of eZ Publish version 'Community Build 2011.11' or greater do not require the kernel override 'extension/bcimagealias/kernel/classes/datatypes/ezimage/ezimagealiashandler.php' (unmodified) at all and likely never will.

The kernel override 'extension/bcimagealias/kernel/classes/datatypes/ezimage/ezimagealiashandler.php' was introduced into the extension in the aim of providing a convenient alternative to upgrading your entire eZ Publish 4.x installation to the 2011.11 build when all you need is one PHP class file to accomplish the task at hand, remove image aliases or generate them. This override if unused may be removed from the extension in the future.

Also there were issues with the changes introduce in 2011.09 build later resolved in the 2011.11 build. Users of eZ Publish Community Build 2011.09, 2011.10 (or any version before) should likely use our provided kernel override as the extension is designed to use this version specifically for most use cases (our unmodified copies come from the 2011.11 build sources in which the previous issues are correctly resolved). After you upgrade to or beyond eZ Publish Community build 2011.11 you can remove this kernel override.

   eZ Publish 4.x >= 4.0 - BCImageAlias by default requires both kernel overrides for this version of eZ Publish
   -- Kernel Override File: extension/bcimagealias/kernel/classes/datatypes/ezimage/ezimagealiashandler.php
   -- Kernel Override File: extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php

   eZ Publish 4.6.x >= 4.6 ( Community Build, 2011.09+ ) - BCImageAlias by default requires both kernel overrides for this version of eZ Publish
   -- Kernel Override File: extension/bcimagealias/kernel/classes/datatypes/ezimage/ezimagealiashandler.php
   -- Kernel Override File: extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php

   eZ Publish 4.6.x >= 4.6 ( Community Build, 2011.10+ ) - BCImageAlias by default requires only one kernel override for this version of eZ Publish
   -- Kernel Override File: extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php

   eZ Publish 4.6.x >= 4.6 ( Community Build, 2011.11+ ) - BCImageAlias by default requires only one kernel override for this version of eZ Publish
   -- Kernel Override File: extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php

   eZ Publish 4.6.x >= 4.6 ( Community Build, 2011.12+ ) - BCImageAlias by default requires only one kernel override for this version of eZ Publish
   -- Kernel Override File: extension/bcimagealias/lib/ezimage/classes/ezimagemanager.php


6) Specifics about image aliases and image alias image variation image files in eZ Publish

- When image aliases are created (on the fly/on demand/when used) a new version of the content object attribute is stored with the updated image alias generated list is stored in xml and saved to the database. While the content object / node version remains unchanged. This is important to realize and understand when working with image aliases.

- Image alias content can be unique between content object attribute versions (different aliases generated, different uploaded file content, etc)

-- Image alias image variations are unique to content object attributes and not shared among other attributes, though attribute versions may have the same content stored or different cache timestamp.

- Image alias image variation image files are not unique to content object attribute versions, content object versions, node or any other system.

- When you upload a new different file into a content object image attribute the previous image alias cache is expired and the aliases are regenerated upon the next usage (any siteaccess). The files are not removed, only until the attribute alias content is accessed are new image alias variation image files created.

- There is not a benefit to trying to remove image alias's image variation image files of non-published or older-versions of content object versions to reduce disk usage because they do not exist. First a non-published node/object would not be able to have aliases at this point in the process. Second even after another version of a node/object is published with different content, Their is no second set of image aliases in the system. Rather the system merely expires the cache of the image alias variations, when they are used again within the system, the alias image variations are regenerated using the new attribute content on the fly on demand. So there is no way to reduce image alias total disk usage in general without removing the use of image aliases within an eZ Publish installation first. You can reduce image alias usage in one of two ways in most situations. Remove content from eZ Publish, remove unused image alias settings, configure your installation to use less image aliases in your settings, templates, PHP code, javascript, etc.

- Image alias image variation files stored on disk are stored ruffly using the following convention, 'var/ezwebin_site/storage/images/parent-node-name/2nd-parent-node-name/node-name/attributeID-1-local/(variation image files, named 'original-file-name_aliasname.jpg')'. Here is a real life default example of an 'original' image alias variation image filepath. IE: var/ezwebin_site/storage/images/getting-started/how-to-use-ez-publish/592-1-eng-US/How-to-use-eZ-Publish.jpg

-- This means you can detect image aliases used in an output filter, fetch the same attribute, regenerate the aliases required etc and replace the alias used in the output buffer for mobile sites using embedded ezxml content used within mobile siteaccesses, as image aliases are mostly only content object attribute specific.

- The image alias system is provided to the end user through the ezimage datatype only.

- You can create datatypes based on ezimage which can be used with bcimagealias extension as we have designed this aspect of the solution to be simple and flexible to use. See the bcimagealias.ini setting file for examples.


7) Permissions error using image alias create, regenerate, remove submenu links or direct module view url access

You should check your role permissions. Do you have the required role policy permissions 'create' and/or 'remove'? Are you certain your user is actually in your user role definitions?

Please re-read doc/INSTALL #10


8) Current siteaccess related siteaccesses image.ini.append.php image aliases image variation image files are not being created

You should check your siteaccess settings, script parameters / module view parameters / workflow event settings and current kernel override autoloads.

Do you have the required kernel override autoloads correctly generated. Are all files within the bcimagealias extension readable by the webserver?

Please re-read doc/INSTALL #7, #7.2 and #7.3


9) Use of eZContentBrowse::browse functionality

The BC Image Alias extension for eZ Publish uses the eZContentBrowse::browse functionality of eZ Publish!

If you install, configure and use the admin module view 'create' or 'remove' which provide use for the eZContentBrowse::browse feature of eZ Publish.

To use the feature simply call either of the module views specifying the NodeID parameter as false.

Which is a really cool idea if you think about it.

Wouldn't it be cool if more module view's allowed you to pass a module view parameter value of false to simply display a node selection form using eZContentBrowse::browse which then performed an action using / based on the NodeID (selection, more than one are supported!) parameter returned by eZContentBrowse::browse to the module view used.

No more need to 'lookup' a NodeID before using BCImageAlias module views, just select the Nodes you want to process and submit :)

You can see all the supported usage examples of how to use these module views by reviewing the doc/USAGE documentation.

Here is the brief usage example syntax summary:

http://(host)/(index)/(siteaccess)/bcimagealias/create/(NodeID)/(Children)/(Regenerate)/(CurrentSiteaccess)
http://(host)/(index)/(siteaccess)/bcimagealias/remove/(NodeID)/(Children)/(Regenerate)/(CurrentSiteaccess)

Here are just a few of the supported usage examples available:

http://localhost/index.php/ezwebin_site_admin/bcimagealias/create/false
http://localhost/index.php/ezwebin_site_admin/bcimagealias/create/false/true/false/true
http://localhost/index.php/ezwebin_site_admin/bcimagealias/create/190/true/true/false
http://localhost/index.php/ezwebin_site_admin/bcimagealias/remove/false
http://localhost/index.php/ezwebin_site_admin/bcimagealias/remove/false/true/false/true
http://localhost/index.php/ezwebin_site_admin/bcimagealias/remove/190/true/true/false

10. Backporting bcimagealias to eZ Publish 3.x / PHP 4.x

Lets be clear. This is not a goal of this project.
Nor is this a recommended solution to any compatibility concern.

Still, by the very design of the bcimagealias extension's solutions
it happens to be very possible to backport the bulk of the contents
of the bcimagealias extension to work within eZ Publish 3.x / PHP 4.x

A warning first, as backporting the extension is very possible this
could require kernel hacks as kernel overrides were not available
until after eZ Publish 4.x

Issues worth mentioning

- Extension PHP code is written in PHP5 Syntax. This would need to be converted to PHP4

- Extension component PHP files have no PHP includes, requires, etc as they were
designed for use in eZ Publish 4.x which provides these features automatically via the autoload system.

- BCImageAlias is mostly a static PHP class which uses the core eZ Publish API
(Which changes very infrequently or substantially)

- Extension scripts may need specific changes to run in eZ Publish 3.x / PHP4 + includes

- Extension cronjobs would need very little changes to eZ Publish 3.x / PHP4 Syntax + includes

- Extension workflow event would need to be backported to eZ Publish 3.x / PHP4 Syntax + includes

- Extension module views would need very little changes to eZ Publish 3.x / PHP4 Syntax + includes

- Extension functionality depends on kernel and lib PHP classes with greater functionality than is provided by default aka kernel hacks / patched kernel class files

Backport with caution and care
